--Introducción a TidalCycles.
--Lenguaje para live coding escrito por Alex Mclean, gradecimiento especial a él y a Alexandra Cárdenas.
--Si queréis mas info. acerca de Haskell podéis buscar "Learn you Haskell for a Great Good" de Miran Lipovača, o "programming in Haskell" de Graham Hutton
--tidalcycles.org


-- Ejemplo sencillo para comenzar
d1 $ s "bd"


-- Estamos creando <<<<<<PATRONES>>>>>>>>> con diferentes samples que están localizados en el folder de samples de SuperDirt,
-- vamos a buscarlos, si queréis añadir sonidos los podéis añadir allí.

-- Cambia al tercer sonido de la carpeta
d1 $ sound "birds:3"

-- Para silenciar todo a la vez:
hush

-- Todo lo que está dentro de comillas define una secuencia dentro de un ciclo
d1 $ sound "bd:3 sn sn sn"

--Podemos tener varias secuencias sonando a la vez
d1 $ sound "bd sn hh [sn sn sn sn]"
d2 $ sound "~ ~ hh"
d3 $ sound "~ sn:3"  --la tilde crea un silencio.

-- Para silenciar cada linea independientemente
d3 silence

--Se puede hacer que un stream suene solo:
solo 2

--Todos los samples en un patrón son tocados en un ciclo. Mira cómo se distribuyen:
-- shift+ enter

d1 $ sound "bd sn hh bd"
d1 $ sound "bd sn hh cp arpy drum"
d1 $ sound "bd sn hh cp arpy drum bd arpy bass2 feel future"

hush
----------

-- Patrones mas complejos: un patrón dentro de un paso de un ciclo:
d1 $ sound "bd casio chink [can can can]"

--Los paréntesis cuadrados agrupan.
d1 $ sound "[bd bd] bd [sn sn sn] sn sn"


--Poliritmia, dos secuencias a la vez
d1 $ sound "[can can can, casio casio]"
hush

--Cuantas queramos
d1 $ sound "[hh, sn cp sn, arpy:4 arpy:2, ~ cp, ~ ~ casio]"

-- Un paso por ciclo con <>
d1 $ sound "bd <arpy:1 arpy:2 arpy:3>"

--repetición
d1 $ sound "bd*2"
d1 $ sound "[clak chin]*2 bd [circus bd:2]/4"
d3 $ sound "[arpy:0 arpy:1 arpy:2 arpy:3]/2"

--La unidad de tiempo del Tidal es Cicles Per Second "cps"
setcps 1
--esto significa 1 ciclo por segundo,

hush

-- <<<<<<<<<<<<<<<<<<FUNCIONES>>>>>>>>>>>>>>>>

-- https://tidalcycles.org/index.php/Category:Functions

-- Podemos tocar un patron en reversa con rev
d1 $ rev $ sound "[[bd sn] cp]"

--Podemos acelerar y desacelerar un patrón así:
d1 $ slow 1 $ sound "[[bd sn] cp]"

d1  $ slow 0.5 $ sound "[[bd sn] cp]"

d2 $ sound "alphabet"

-- También podemos usar "fast o density" que es lo contradio de "slow"

d1 $ density 2 $ sound "[[bd sn] cp]"

d2 silence

-- brak redistribuye los sonidos, un ciclo normal y el siguiente lo reproduce a la mitar del ciclo y lo mueve un cuarto de ciclo...
d1 $ brak $ sound "feel feel:3"

cada ciclo hace esto:
d1 $ s "feel feel:3"
d1 $ s "~ feel feel:3 ~ "

o esto mismo:
d1 $ s "<[feel feel:3][~ feel feel:3 ~]>"

hush

-- <<<<<<<<<<A Higher-order function>>>>>>>>>

-- is a function that accepts a function among its parameters.
-- https://tidalcycles.org/index.php/Category:Higher-order_functions

--tocar en reversa sólo algunas veces
d1 $ sometimes (rev) $ sound "[[bd sn] cp]"

--lo podemos revertir cada 5 ciclos
d1 $ every 5 (rev) $ sound "[[bd sn] cp]"


-- Combinando velocidades:
d1 $ every 4 (slow 0.5) $ every 6 (slow 2) $ sound "[[bd sn] cp]"

--Podemos juxtaponer un patrón con su propia versión en reversa así:

d1 $ slow 2 $ jux (rev) $ sound "numbers:1 numbers:2 numbers:3 numbers:4" --esta funcion solo se aplica en el canal derecho

d1  $ jux (rev) $ sound "bd hh arpy:2 metal"

d1  $ jux (# accelerate "-0.5") $ sound "bd hh arpy:2 metal"

hush

--Iteraciones
d1 $ slow 3 $ iter 4 $ sound "numbers:1 numbers:2 numbers:3 numbers:4"

--con iter 2:
--1 2 3 4
--3 4 1 2

-- iter 4:
--1 2 3 4
--2 3 4 1
--3 4 1 2
--4 1 2 3


hush
--Y juxtaponer esa iteración
d1 $ jux (iter 4) $ sound "numbers:1 numbers:2 numbers:3 numbers:4"

hush

----------- Probemos algunos samples y hagamos algunos patrones---------
------------------

--Mas funciones!

--palíndromos
d1 $ palindrome $ sound "newnotes:2 newnotes:3 newnotes:4"

--Podemos cortar los samples con chop:
d1 $ every 4 (chop 8) $ sound "newnotes:2 newnotes:3 newnotes:4"
  # gain "1.5"


--podemos estriar los samples, es un granulador que divide los samples y mezcla los trozos:
  d1 $ every 4 (striate 16) $ sound "numbers:0 alphabet:4"

--gap es otro tipo de granulador que divide el sample y calla algunos trozos:
  d1 $ gap 16 $ sound "[jvbass drum:4]"


hush

--------------------------------------------------------------------------------
-- <<<Secuenciando funciones>>>>>
-- podemos secuenciar el comportamiento de las funciones también!
  d1 $ gap "<2 4 6>" $ sound "[jvbass drum:4]"

hush

d1 $ every "<3 4 5>" (fast "2 4 3") $ sound "newnotes:2 newnotes:3 newnotes:4"


d1 $ slow 2 $ chop "<3 10 20 4 2>" $ sound "newnotes:2 newnotes:3 newnotes:4"


d1 $ striate "<2 10 2 4>" $ sound "newnotes:2" --spread

d1 silence

-- + palíndromo
d1 $ palindrome $ chop "<1 10 2 4>" $ sound "newnotes:2 newnotes:3 newnotes:4"

-- + jux!
d1 $ jux (palindrome) $ chop "<1 10 2 4>" $ sound "newnotes:2 newnotes:3 newnotes:4"

d1 $ jux (palindrome) $ chop "<1 10 2 4>" $ sound "bass:3 bass:1 bass:8"

hush

----------------
-- <<<<<<<Performance>>>>>>>>>

-- Con stack podemos agrupar varios patrones en un sólo stream:

d1 $ stack [
  sound "bd bd*2",
  sound "hh*2 [sn cp] cp future*4",
  sound (samples "arpy*8" (run 16))
]

--Esto es util para modificar todo con un parámetro

d1 $ every 4 (striate 3) $ stack [
  sound "bd bd*2",
  sound "hh*2 [sn cp] cp future*4",
  sound (samples "arpy*8" (run 16))
]


hush


-- irand escoge un sonido random de la carpeta, rand: numero random entre 0. y 1.
d1 $ sound "glitch*4 [glitch*2]"  # n (irand 19)
# pan (rand)

-- truco para escoger los sonidos de la carpeta mas rapidamente
d1 $ n "0 1 [<3 4 6 7> 1]" # sound "arpy"

-- para que suene en cada ciclo:

--degradeBy
d1 $ degradeBy 0.5 $ sound "moog"

--whenmod
d1 $ whenmod 8 4 (const silence) $ sound "jungle*4" # n (irand 12)

-------------------------------------------------------------------------------

----EFECTOS!!!
--https://tidalcycles.org/index.php/All_effects_and_synths
---Podemos utilizar diferentes efectos para nuestros samples y synths:

d1 $ sound "tok*3"
    # gain "2"
    # cutoff "200"


    --Podemos acelerar y desacelerar los samples:
    d1 $ sound "bass*4"
        # gain "2"
        # accelerate "-3 3"

    --Podemos panearlos:
    d1 $ sound "blip*4"
          # pan "0 1"


    --cutoff es un filtro pasa bajos. Le damos la frecuencia de corte en Hertz.
    d1 $ sound "jvbass*4"
       # cutoff "4000"

    -- podemos secuenciar los parámetros de los efectos también
       d1 $ sound "jvbass*4"
          # cutoff "<70 100 200 300 500 1000 >"

    --Podemos automatizar cambios en los efectos con funciones contínuas (sine, tri, saw)
    d1 $ sound "blip*4"
        # slow 4 (pan sine)


      d1 $ sound "blip*4"
            # cutoff (range 300 1000 $ slow 4 $ sine)
            # gain "1.5"


hush

--Tenemos filtros de formantes:
d1 $ sound "jvbass*18"
      # vowel "u a i e o"
      # gain "2"

--reverb!:
d1 $ sound "hh cp"
   # room "0.3"
   # size "0.6"

--crush
d1 $ sound "pluck pluck:3 ~ ~" # gain 1.3
 # crush 4

--cut
d1 $ sound "moog moog:1" # cut "1"

-----



   hush

-- SuperCollider sc3-plugins.

---Synths!!!

--usando notas midi
d1 $ midinote "60 62*2" # s "supersaw"

--usando notas musicales (f para bemol y s para sostenidos )
d1 $ n "c5 d5*2" # s "supersaw"

d1 $ every 4 (rev) $ n "<[g5 df5 e5 a5] [gf5 d5 c5 g5]*3>" # s "supersaw"

--varias notas a la vez
d2 $ n "<[a5,cs5,e5,g5]*3 [d5,fs5,a5,c5]>" # s "supersquare" # gain "0.8"

 hush

-- también podemos especificar la nota con n, donde 0 es C4 (Do central, o nota midi 60)
 d1 $ n "<0 2 4 5 7>*2" # s "supersaw"


d1 $ n "c5*2 d5*2" # s "psin" # sustain "0.5"
# delaytime (range 0.25 1 $ slow 2 $ sine)
# delay 0.5
# pan sine


--TidalCycles es mantenido y expandido por una comunidad muy activa en internet. No dudeis en contactar a la comunidad en caso de dudas, problemas o sugerencias!
-- https://talk.lurk.org/channel/algorithmic-barcelona
-- https://talk.lurk.org/channel/tidal
--el canal de youtube de tidal cycles tiene excelentes tutoriales
